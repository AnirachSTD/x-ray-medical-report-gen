
import { GoogleGenAI, Chat } from '@google/genai';
import { UploadedFile, KnowledgeItem } from '../types';

const BASE_PROMPT = `You are an expert AI radiologist. Your purpose is to provide a detailed and accurate analysis of medical X-ray images, adopting a rigorous and systematic approach to minimize errors and consider all possibilities.

**Your Process:**
Before generating the report, you must internally perform a step-by-step analysis. Think like a seasoned radiologist:
1.  First, assess the technical quality of the image(s).
2.  Then, systematically review all anatomical structures, following a checklist (like ABCDEs: Airways, Breathing, Cardiac, Diaphragm, Everything else).
3.  For any potential finding, develop a list of differential diagnoses. Do not jump to the most obvious conclusion. Consider subtle signs.
4.  Finally, synthesize your thoughts into a structured, professional report.

**Report Generation Instructions:**
Generate a comprehensive medical report with the following sections. Use precise medical terminology.

*   **Patient Information:**
    *   Patient Name: Not Provided
    *   Date of Birth: Not Provided
    *   Medical Record Number: Not Provided
    *   Date of Examination: Not Provided

*   **Examination:**
    *   State the type of examination (e.g., "Pelvis X-ray, AP view").

*   **Findings:**
    *   Provide a detailed, systematic description of your observations. Methodically comment on the following, paying close attention to bone structures for signs of fracture, displacement, or degenerative changes.
    *   **Bones:** Examine the visualized pelvic girdle, sacrum, coccyx, and proximal femurs. Look for cortical disruptions, fracture lines, and signs of dislocation. Assess joint spaces (e.g., sacroiliac, hip joints) for narrowing or irregularities.
    *   **Soft Tissues:** Inspect the surrounding soft tissues for any abnormal calcifications, masses, or swelling.

*   **Impression:**
    *   This is your conclusion. Summarize the most critical findings.
    *   State the most likely diagnosis first (e.g., "Acute fracture of the left femoral neck.").

*   **Recommendation:**
    *   Suggest appropriate next steps for management or further investigation, such as clinical correlation, follow-up imaging (e.g., CT scan), or orthopedic consultation.

*   **Differential Diagnosis:**
    *   Based on the findings, list other possible conditions or diseases that should be considered. For each diagnosis, provide an estimated confidence level in percentages (e.g., "Metastatic Disease - Confidence: 75%"). Explain the reasoning for each differential diagnosis if it adds clarity.

*   **Disclaimer:**
    *   Conclude the report with: "DISCLAIMER: This report is generated by an AI model and is for informational purposes only. It is not a substitute for professional medical advice, diagnosis, or treatment. All findings should be reviewed and verified by a qualified healthcare professional."

Now, analyze the attached image(s) and generate the report based on these rigorous instructions.`;


export const getInitialPrompt = (knowledgeBase: string): string => {
    if (!knowledgeBase.trim()) {
        return BASE_PROMPT;
    }

    return `You are an expert AI radiologist. Before you begin your analysis, review the following anonymized feedback from expert radiologists on previous cases. This feedback highlights common errors or missed findings. Use this accumulated knowledge to improve the accuracy of your current analysis.

**Prior Knowledge from Human Feedback:**
---
${knowledgeBase}
---

${BASE_PROMPT}
`;
};

export const getRefinementPrompt = (feedback: string): string => {
    return `A qualified radiologist has provided the following feedback on your initial report: "${feedback}".

Please carefully consider this new information, correct any inaccuracies in your initial analysis, and generate a single, revised, and complete medical report that incorporates this feedback. The revised report must follow the same structured format as the original. Do not just list the changes; provide the full, corrected report.`;
}

export async function generateReport(
  files: UploadedFile[],
  knowledgeBase: KnowledgeItem[],
  onStatusUpdate: (message: string) => void
): Promise<{ reportText: string; chatSession: Chat }> {
    if (!process.env.API_KEY) {
        throw new Error("API_KEY environment variable is not set.");
    }
    
    onStatusUpdate('Preparing images for analysis...');
    const base64Images = await Promise.all(
        files.map(async ({ file }) => {
            const reader = new FileReader();
            return new Promise<string>((resolve, reject) => {
                reader.onload = () => {
                    if (typeof reader.result === 'string') {
                        resolve(reader.result.split(',')[1]);
                    } else {
                        reject(new Error('Failed to read file as base64'));
                    }
                };
                reader.onerror = error => reject(error);
                reader.readAsDataURL(file);
            });
        })
    );
      
    const mimeTypes = files.map(f => f.file.type);
    const knowledgeBasePromptText = knowledgeBase
        .map(item => `### ${item.name}\n${item.content}`)
        .join('\n\n---\n');
    const initialPrompt = getInitialPrompt(knowledgeBasePromptText);

    const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });
    const chat = ai.chats.create({ model: 'gemini-2.5-flash' });

    const imageParts = base64Images.map((img, index) => ({
        inlineData: { data: img, mimeType: mimeTypes[index] },
    }));

    const MAX_RETRIES = 3;
    
    for (let attempt = 0; attempt < MAX_RETRIES; attempt++) {
        try {
            if (attempt === 0) {
                onStatusUpdate('Communicating with AI model...');
            }
            const response = await chat.sendMessage({ message: { parts: [{ text: initialPrompt }, ...imageParts] } });
            return { reportText: response.text, chatSession: chat };
        } catch (err: any) {
            if (err.message && (err.message.includes('503') || err.message.toUpperCase().includes('UNAVAILABLE'))) {
                if (attempt < MAX_RETRIES - 1) {
                    const delay = Math.pow(2, attempt) * 1500; // Exponential backoff
                    onStatusUpdate(`AI service is busy. Retrying... (Attempt ${attempt + 2}/${MAX_RETRIES})`);
                    await new Promise(resolve => setTimeout(resolve, delay));
                }
            } else {
                // Not a retriable error, throw it immediately
                throw err;
            }
        }
    }
    
    // If loop completes, it means all retries have failed for a retriable error.
    throw new Error("The AI analysis service is currently at full capacity due to high demand. Please try again in a few minutes.");
}
